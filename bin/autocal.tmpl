#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p workq
#SBATCH --account=ACCOUNT
#SBATCH --time=12:00:00
#SBATCH --nodes=1
TASKLINE

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
    exit $1
fi
}

cores=`grep -P '^core id\t' /proc/cpuinfo  | wc -l`
obsnum=OBSNUM
datadir=DATADIR
modeldir="/group/mwasci/code/anoko/mwa-reduce/models"
# Owned by mwaadmin, can't use this
catfile="/group/mwa/software/MWA_Tools/MWA_Tools/catalogues/GLEAM_EGC.fits"
catfile="/group/mwasci/nhurleywalker/GLEAM-X-pipeline/models/GLEAM_EGC.fits"
catfile="/group/mwasci/nhurleywalker/GLEAM-X-pipeline/models/skymodel_only_alpha.fits"
# Interval for ionospheric triage (in time steps)
ts=30

# start
track_task.py start --jobid=${SLURM_JOBID} --taskid=1 --start_time=`date +%s`

cd ${datadir}/${obsnum}
metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]]
then
    wget "http://mwa-metadata01.pawsey.org.au/metadata/fits?obs_id=${obsnum}" -O ${metafits}
    test_fail $?
fi

calibrator=$( pyhead.py -p CALIBSRC $metafits | awk '{print $3}' )

if [[ $calibrator == "None" ]] || [[ $calibrator == "open" ]]
then
    echo "Running infield calibration for $obsnum"
    RA=$( pyhead.py -p RA $metafits | awk '{print $3}' )
    Dec=$( pyhead.py -p DEC $metafits | awk '{print $3}' )

    if [[ ! -e "local_gleam_model.txt" ]]
    then
        /group/mwasci/nhurleywalker/GLEAM-X-pipeline/bin/crop_catalogue.py --ra=$RA --dec=$Dec --radius=20 --minflux=1.0 --attenuate --metafits=${metafits} --catalogue=${catfile} --fluxcol=S_200
        /group/mwasci/nhurleywalker/GLEAM-X-pipeline/bin/vo2model.py --catalogue=cropped_catalogue.fits --point --output=local_gleam_model.txt --racol=RAJ2000 --decol=DEJ2000 --acol=a --bcol=b --pacol=pa --fluxcol=S_200 --alphacol=alpha
    fi
    modeldir=.
    calmodel=local_gleam_model.txt
else
    echo "Calibrating on $calibrator for $obsnum"

    calmodel=`basename $modeldir/model-$calibrator*comp_withalpha.txt`
    if [[ ! -e $modeldir/$calmodel ]]
    then
        calmodel=`basename $modeldir/model-$calibrator*point-source.txt`
    fi
    if [[ ! -e $modeldir/$calmodel ]]
    then
        echo "No calibrator model available for $calibrator in $modeldir."
        cd $modeldir
        callist=`ls *-point-source.txt | sed "s/model-//g" | sed "s/-point-source.txt//g"`
        echo "Available calibrators are: $callist in $modeldir"
        echo "Use the name as it is specified in the observing database, e.g. HydA for Hydra A."
        test_fail 1
        exit 1
    fi
    calmodel=$calmodel
fi

cd ${datadir}/${obsnum}

# Ionospheric triage
solutions=${obsnum}_${calmodel%%.txt}_solutions_ts${ts}.bin
calibrate -t ${ts} -j ${cores} -m $modeldir/${calmodel} -minuv 200 -maxuv 2500 ${obsnum}.ms ${solutions}
test_fail $?

aocal_plot.py --refant=127 --amp_max=2 ${solutions}
test_fail $?

aocal_diff.py --metafits=$metafits --names $solutions
test_fail $?

iono_update.py --ionocsv ${obsnum}_ionodiff.csv
test_fail $?

# At the moment, assume that the ionosphere is OK, and derive some real solutions
solutions=${obsnum}_${calmodel%%.txt}_solutions_initial.bin

# calibrate
calibrate -j ${cores} -m ${calmodel} -minuv 200 -maxuv 2500 ${obsnum}.ms ${solutions}
test_fail $?

# plot calibration solutions
aocal_plot.py --refant=127 --amp_max=2 ${solutions}
test_fail $?

track_task.py finish --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
