#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p STANDARDQ
#SBATCH --account=ACCOUNT
#SBATCH --time=04:00:00
#SBATCH --nodes=1
TASKLINE

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
    exit $1
fi
}

datadir=DATADIR
obsnum=OBSNUM
tres=TRES
fres=FRES
memory=MEMORY

# start task
track_task.py start --jobid=${SLURM_JOBID} --taskid=1 --start_time=`date +%s`

cd ${datadir}

if [[ -e ${obsnum}_vis.zip ]]
then
    mkdir ${obsnum}
    cd ${obsnum}
    mv ../${obsnum}_vis.zip ./
    unzip ${obsnum}_vis.zip
    rm ${obsnum}_vis.zip
else
    cd ${obsnum}
fi

zipflag="${obsnum}_flags.zip"
if [[ -e ${zipflag} ]]
then
    unzip ${zipflag}
    flagfiles="-flagfiles ${obsnum}_%%.mwaf"
else
    flagfiles=""
fi

if [[ ! -d ${obsnum}.ms ]]
then
# Use 80% of the memory
    cotter ${flagfiles} -absmem ${memory} -timeres ${tres} -freqres ${fres} -allowmissing \
    -edgewidth 80 -m ${obsnum}_metafits_ppds.fits -o ${obsnum}.ms *gpubox*.fits 

    test_fail $?
    if [[ -d ${obsnum}.ms ]]
    then 
         rm *gpubox*fits *.zip *.mwaf ${obsnum}_metafits_ppds.fits
    fi
else
    echo "Cotter has already run for ${obsnum}.ms"
fi

track_task.py finish --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
