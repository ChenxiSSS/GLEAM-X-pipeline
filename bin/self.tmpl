#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p STANDARDQ
#SBATCH --account=ACCOUNT
#SBATCH --time=12:00:00
#SBATCH --nodes=1

function test_fail {
if [[ $1 != 0 ]]
then
    cd ${base}
    python bin/track_task.py fail --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
    exit $1
fi
}

# Set version number
version=3.0 # First GLEAM-X pipeline data reduction April 2018
absmem=ABSMEM
obsnum=OBSNUM
base=BASEDIR
# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# Minimum uvw for self-calibration (in lambda)
minuv=75

# Update database
cd ${base}
track_task.py start --jobid=${SLURM_JOBID} --taskid=1 --start_time=`date +%s`

datadir=${base}/${obsnum}
cd ${datadir}

metafits=`ls -t ${obsnum}*metafits* | head -1`

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.0
fi

# Set up channel-dependent options
chan=`pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}'`
bandwidth=`pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}'`
centfreq=`pyhead.py -p FREQCENT ${metafits} | awk '{print $3}'`
    # Pixel scale
scale=`echo "$basescale / $chan" | bc -l` # At least 4 pix per synth beam for each channel
    # Naming convention for output files
lowfreq=`echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}'`
highfreq=`echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}'`
freqrange="${lowfreq}-${highfreq}"

# Set up position-dependent options
RA=`pyhead.py -p RA $metafits | awk '{print $3}'`
Dec=`pyhead.py -p Dec $metafits | awk '{print $3}'`
    # Multiscale clean original GLEAM Galactic plane, normal clean for everything else
b=`fk5_to_gal.py $RA $Dec | awk '{printf("%d",$2)}' | sed "s/-//"`
if [[ $b -le 15 ]] && [[ $telescope == "MWA128T" ]]
then
    multiscale="-multiscale -mgain 0.6"
else
    multiscale="-mgain 0.85"
fi
    # Set up the primary beam to match our observation WCS -- may be needed for peeling
dec=`echo $Dec | awk '{printf("%.0f",$1)}'`
HA=`pyhead.py -p HA $metafits | awk '{print $3}'`
ha=`echo $HA | awk 'BEGIN{FS=":"} {printf("%.0f",$1+($2/60.)+($3/3600.))}'`

# Calculate min uvw in metres
minuvm=`echo "234 * $minuv / $chan" | bc -l`

#cp ../pbeams/Dec${dec}_${chan}/beam-0000-xxi.fits ./testwcs.fits
#pyhead.py -u CRVAL1 $RA ./testwcs.fits
# For use with this later, if needed:
#bool=`check_src_fov.py -f testwcs.fits -s $source`

if [[ ! -e ${obsnum}_initial-XX-image.fits ]]
then
## quick n dirty image-based clean to get the initial model
# TODO: test slow-down of doing 4 channels to preserve spectral information
    wsclean -name ${obsnum}_initial -size ${imsize} ${imsize} -niter 40000 -threshold 0.001 -pol xx,yy,xy,yx -weight briggs ${robust} -scale ${scale:0:8} -stop-negative -join-polarizations -minuv-l $minuv ${obsnum}.ms
    if [[ ! -e ${obsnum}_initial-XX-image.fits ]]
    then
        echo "WSClean must have seg-faulted! PANIC!"
        exit 1
    fi
fi
# Make a primary-beam corrected model, for use NOW in calibrating
pbcorrect ${obsnum}_initial model.fits beam-MFS ${obsnum}_initcor
# Set Q, U, V to zero
if [[ ! -d unused ]]
then
    mkdir unused
fi
mv ${obsnum}_initcor-Q.fits unused/
mv ${obsnum}_initcor-U.fits unused/
mv ${obsnum}_initcor-V.fits unused/

# "Uncorrect" the beam
pbcorrect -uncorrect ${obsnum}_initunc model.fits beam-MFS ${obsnum}_initcor

wsclean -predict -name ${obsnum}_initunc -size ${imsize} ${imsize} -pol xx,yy,xy,yx -weight briggs -1.0 -scale ${scale:0:8} -absmem ${absmem} -smallinversion -j ${ncpus} ${obsnum}.ms

# self-cal
# Now using minimum baseline of 75 lambda (=250m at 88 MHz)
calibrate -j ${ncpus} -minuv $minuvm -a 0.001 0.0001 -p phases.txt gains.txt $caldatacolumn ${obsnum}.ms ${obsnum}_self_solutions.bin | tee calibrate.log

aocal_plot.py --refant=127 ${obsnum}_self_solutions.bin

flaggedchans=`grep "gains to NaN" calibrate.log | awk '{printf("%03d\n",$2)}' | sort | uniq | wc -l`
if [[ $flaggedchans -gt 200 || ! -s ${obsnum}_self_solutions.bin ]]
then
    echo "More than a third of the channels were flagged!"
    echo "Will not apply calibration solutions or clean any more deeply."
    exit 1
fi

applysolutions $caldatacolumn -copy ${obsnum}.ms ${obsnum}_self_solutions.bin
# Re-run flagger to catch any broken channels after self-calibration

track_task.py finish --jobid=${SLURM_JOBID} --taskid=1 --finish_time=`date +%s`
